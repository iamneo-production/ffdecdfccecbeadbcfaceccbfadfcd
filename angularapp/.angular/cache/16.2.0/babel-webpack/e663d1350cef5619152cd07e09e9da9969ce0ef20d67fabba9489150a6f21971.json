{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nclass CurrencyconvPipe {\n  transform(value, from, to) {\n    if (from == to) {\n      return value;\n    }\n    if (from == '0.876893') {\n      from = 'GBP';\n    } else if (from == '1.126735') {\n      from = 'USD';\n    } else {\n      from = 'INR';\n    }\n    if (to == '0.876893') {\n      to = 'GBP';\n    } else if (to == '1.126735') {\n      to = 'USD';\n    } else {\n      to = 'INR';\n    }\n    const exchangeRates = [{\n      id: 'USD',\n      value: 1.126735\n    }, {\n      id: 'GBP',\n      value: 0.876893\n    }, {\n      id: 'INR',\n      value: 79.677056\n    }];\n    const fromvalue = exchangeRates.find(exchange => exchange.id == from).value;\n    const tovalue = exchangeRates.find(exchange => exchange.id == to).value;\n    let result = Math.round(value * tovalue / fromvalue);\n    return result.toFixed(2);\n  }\n}\n_class = CurrencyconvPipe;\n_class.ɵfac = function CurrencyconvPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"currencyconv\",\n  type: _class,\n  pure: true\n});\nexport { CurrencyconvPipe };","map":{"version":3,"names":["CurrencyconvPipe","transform","value","from","to","exchangeRates","id","fromvalue","find","exchange","tovalue","result","Math","round","toFixed","pure"],"sources":["/home/coder/project/workspace/angularapp/src/app/currencyconv.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'currencyconv'\n})\nexport class CurrencyconvPipe implements PipeTransform {\n\n  transform(value: number, from:string,to:string): any {\n\n    if(from == to)\n    {\n      return value;\n    }\n\n    if(from == '0.876893')\n    {\n      from = 'GBP';\n    }\n    else if (from == '1.126735') \n    {\n      from = 'USD';\n    } \n    else {\n      from = 'INR';\n    }\n\n    if (to == '0.876893') \n    {\n      to = 'GBP';\n    } \n    else if (to == '1.126735') \n    {\n      to = 'USD';\n    } \n    else \n    {\n      to = 'INR';\n    }\n\n    interface Exchange {\n      id :string;\n      value :number;\n    }\n\n    const exchangeRates: Exchange[] = \n    [\n      {id: 'USD',  value: 1.126735 },\n      {id: 'GBP',  value: 0.876893 },\n      {id: 'INR',  value: 79.677056}\n    ];\n\n    const fromvalue: any = exchangeRates.find((exchange) => exchange.id == from)!.value;\n\n    const tovalue: any = exchangeRates.find((exchange) => exchange.id == to)!.value;\n\n    let result: number = Math.round((value * tovalue) / fromvalue);\n\n    return result.toFixed(2);\n  }\n\n}\n"],"mappings":";;AAEA,MAGaA,gBAAgB;EAE3BC,SAASA,CAACC,KAAa,EAAEC,IAAW,EAACC,EAAS;IAE5C,IAAGD,IAAI,IAAIC,EAAE,EACb;MACE,OAAOF,KAAK;;IAGd,IAAGC,IAAI,IAAI,UAAU,EACrB;MACEA,IAAI,GAAG,KAAK;KACb,MACI,IAAIA,IAAI,IAAI,UAAU,EAC3B;MACEA,IAAI,GAAG,KAAK;KACb,MACI;MACHA,IAAI,GAAG,KAAK;;IAGd,IAAIC,EAAE,IAAI,UAAU,EACpB;MACEA,EAAE,GAAG,KAAK;KACX,MACI,IAAIA,EAAE,IAAI,UAAU,EACzB;MACEA,EAAE,GAAG,KAAK;KACX,MAED;MACEA,EAAE,GAAG,KAAK;;IAQZ,MAAMC,aAAa,GACnB,CACE;MAACC,EAAE,EAAE,KAAK;MAAGJ,KAAK,EAAE;IAAQ,CAAE,EAC9B;MAACI,EAAE,EAAE,KAAK;MAAGJ,KAAK,EAAE;IAAQ,CAAE,EAC9B;MAACI,EAAE,EAAE,KAAK;MAAGJ,KAAK,EAAE;IAAS,CAAC,CAC/B;IAED,MAAMK,SAAS,GAAQF,aAAa,CAACG,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACH,EAAE,IAAIH,IAAI,CAAE,CAACD,KAAK;IAEnF,MAAMQ,OAAO,GAAQL,aAAa,CAACG,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACH,EAAE,IAAIF,EAAE,CAAE,CAACF,KAAK;IAE/E,IAAIS,MAAM,GAAWC,IAAI,CAACC,KAAK,CAAEX,KAAK,GAAGQ,OAAO,GAAIH,SAAS,CAAC;IAE9D,OAAOI,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC;EAC1B;;SArDWd,gBAAgB;;mBAAhBA,MAAgB;AAAA;;;QAAhBA,MAAgB;EAAAe,IAAA;AAAA;SAAhBf,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}